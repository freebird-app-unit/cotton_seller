{"version":3,"sources":["index.tsx"],"names":["Platform","NativeModules","invariant","perPlatformTypes","types","OS","RNDocumentPicker","setTimeout","console","warn","pickDirectory","Promise","resolve","pickMultiple","opts","options","allowMultiSelection","pick","pickSingle","then","results","type","allFiles","Array","isArray","doPick","every","length","includes","mode","TypeError","copyTo","releaseSecureAccess","uris","uri","E_DOCUMENT_PICKER_CANCELED","isCancel","err","code"],"mappings":"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","sourcesContent":["import { Platform, NativeModules } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  fileCopyUri: string\n  copyError?: string\n  type: string\n  name: string\n  size: number\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\ntype DocumentPickerType = {\n  pick(options: Record<string, any>): Promise<DocumentPickerResponse[]>\n  releaseSecureAccess(uris: string[]): Promise<void>\n  pickDirectory(): Promise<DirectoryPickerResponse>\n}\n\nconst RNDocumentPicker: DocumentPickerType = NativeModules.RNDocumentPicker\n\nif (!RNDocumentPicker) {\n  // Use a timeout to ensure the warning is displayed in the YellowBox\n  setTimeout(() => {\n    console.warn(\n      'RNDocumentPicker: Native module is not available: Either the native module was not properly installed (please follow readme installation instructions)' +\n        \"or you're running in a environment without native modules (eg. JS tests in Node). A module mock is not available at this point, contributions are welcome!\",\n    )\n  }, 0)\n}\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n}\n\nexport function pickDirectory(): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'android' || Platform.OS === 'windows') {\n    return RNDocumentPicker.pickDirectory()\n  } else {\n    // TODO iOS impl\n    return Promise.resolve(null)\n  }\n}\n\nexport function pickMultiple<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    ...opts,\n    allowMultiSelection: true,\n  }\n  return pick(options)\n}\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n  if (!Array.isArray(options.type)) {\n    options.type = [options.type]\n  }\n\n  // @ts-ignore give me a break...\n  return doPick(options)\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DocumentPickerOptions<OS> & {\n    type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n    allowMultiSelection: boolean\n  },\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    // @ts-ignore TS2345: Argument of type 'string' is not assignable to parameter of type 'PlatformTypes[OS][keyof PlatformTypes[OS]]'.\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return RNDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return RNDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\n\nexport function isCancel(err: Error & { code?: string }): boolean {\n  return err?.code === E_DOCUMENT_PICKER_CANCELED\n}\n\nexport default {\n  isCancel,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickMultiple,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"]}